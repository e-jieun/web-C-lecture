const a = 3 + [];
// ? a는 문자열 3이 된다.

let b = {};
let objectValue = b.propKey;
// ? b.propKey는 undefined 값을 objectValue 변수에 대입된다.

function funcC(param) {
  return param/2;
}

console.log(funcC("hello"));
// ? NaN이 리턴된다.

/*
 <!--
  ? 타입스크립트를 설명하는 책에서는 다음과 같은 설명을 덧붙인다.
  * "명백하게 잘못된 동작임에도 자바스크립트는 예외를 던지지 않고 최선을 다해 결과를 도출한다."
  
  work .1 변수 a
  * 숫자와 배열이 '덧셈' 이나 '결합'을 할 수 없으므로 변수 a는 에러를 발생시켜야 한다.
  * 하지만 위의 예시처럼 문자열 "3"으로 바꾸어 버리는 문제가 발생한다 
  * 잘못된 데이터를 위처럼 + 연산을 했을때 에러를 발생시켜야 해당 문제를 사전에 점검할 수 있지만, 자바스크립트는 이러한 문제를 에러로 판단하지않고, '임의로' 에러없이 결과를 만들어내버린다.
  * '에러가 나지 않는 것이 에러' 인 대표적인 예시이다.
  
  work .2 객체 b
  * 객체 b에는 propKey라는 키 값이 정의 되어있지 않다.
  * undefined는 '정의되지 않았다' 라는 뜻의 숫자, 문자열, 불리언과 같은 '동등한 지위'를 갖는 데이터타입이므로
  * 할당한 바가 없는 데이터타입이 리턴된 것이기때문에 언뜻보기엔 문제가 없어보이지만 
  * 굉장히 큰 문제이다.
  
  work .3 함수 funcC()
  * 매개변수가 나눗셈 2를 한 값을 리턴하는 간단한 함수이다.
  * 하지만 아래의 console.log에서 호출하는 것처럼 "다른타입"을 기입하였을때 "해당 인수는 나눗셈을 할 수 없다" 라는 
  * 에러를 발생시켜야만 한다. 하지만 NaN 이라는 값을 리턴한다.
  * NaN 값 자체가 데이터타입에 준하지 않고,
  * 그 자체로 Not a number 라는 뜻을 내포하고 있지만
  * 이 자체가 하나의 '값'으로서 출력되었다는 것이 문제로 꼽는다.
  * 정상적이라면 에러를 발생시켜 데이터타입을 확인 할 수 있도록 동작해야한다.

 -->

*/
