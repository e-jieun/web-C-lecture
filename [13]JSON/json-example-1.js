/*

  todo : 해당 예제는
  todo : 네트워크관련 이해
  todo : 데이터 통신 ( JSON, AJAX )
  todo : 백엔드 프로그래밍 언어로서의 자바스크립트 예제이며
  todo : 퍼블리셔 직업군보다는 프론트엔드 직업군에 가깝다.
  ? 외부 API 데이터를 수집, 분석, 가공 -> 웹사이트로 출력하고자 하는 훈련생이 있다면 아래의 예제를 확인할 것

  * JSON : JavaScript Object Notation 자바스크립트 객체 표기 방법으로 데이터를 저장하는 확장자이름
  * JSON : 단순하고 간편하게 정의하고 다룰 수 있어 매우 인기가 높은 데이터 방식으로 과거 HTML의 원형인 XML의 대체제로 급부상했다.
  * JSON : 자바스크립트에서 JSON을 다루는 방식은 본체가 자바스크립트 표기를 따르기 때문에 다른 언어와 달리 매우 간단하다.
  * JSON : JSON.strigify() : 객체를 JSON 파일로 저장하는 메서드
  * JSON : JSON.parse() : JSON 확장자로 만들어진 파일을 객체방식으로 읽어들이는 메서드
  * JSON : "JSON"은 네 음절 모두 대문자로 작성하며, 지원하는 메서드는 위에서 설명한 단 두개의 메서드만 존재한다.
  
  * AJAX : Asynchronous JavaScript And XML 
  * AJAX : 비동기 통신 기술을 뜻하며 부르는 사람에 따라 에이젝스, 아작스 등등으로 불린다.
  * AJAX : AJAX 기술이 대표적으로 사용되는 웹서비스를 꼽는다면, 검색창의 연관검색어가 실시간으로 바뀌는 인터렉션, 지도 API 등이 대표적이다.
  * AJAX를 사용하는 이유 : 전체의 데이터를 다시 새로 전송할 필요가 없는 일부분일경우 '조금만' 업데이트 혹은 변경할 수 없느냐라는 부분에서 태생 되었고, 지도서비스가 대표적이다. 하나의 좌표기준 예를 들어 "대전" 을 검색했다면 그 범위에 해당하는 데이터만 전송하고 나머지는 새로운 요청이 있을때만 '조금씩' 더 보여주는 방식이다. 대전을 검색하는 사용자에게 굳이 서울데이터 까지 보낼필요는 없는 맥락이다.
  * 서버 관리 측면에서는 매우 압도적으로 성능상승과 부하비용을 절감, 효율적으로 바꿀 수 있고
  * 검색 인터렉션 측면에서는 사용자가 모든 키워드를 작성하지 않아도 '알아서 찾아주는' 방식의 서비스를 제공하기 때문에 서비스 품질측면에서 매우 훌륭한 인상을 남길 수 있다.
  * 
  * 따라서 통신관련한 (예 : 요청과 응답의 개념, 클라이언트와 호스트와의 관계등등) 기반지식이 필요하나, 그 성능과 효과는 정적페이지를 만드는 것과는 비교가 안될 만큼 큰 경쟁력과 서비스 품질을 챙길 수 있다.
  * 설명상 비동기 통신 AJAX를 의역하면
  * "다 보여주지않고 조금씩만 빨리 보여주는것" 이라고 비유할 수 있다.

*/

const fs = require('fs');
/*
  * fs는 file system의 약자로, node.js가 지원하는 코어 메서드로,
  * 파일시스템에 접근하는 '모듈'을 import(가져오기) 한 작성이다.
  * import from을 사용하지 않고, 요청하다라는 뜻의 require함수를 사용하는 것은 버전문제이며, 곧 import 선언도 지원할 것으로 예상된다.
  * .require() 함수를 통해 필요한 기능이나 모듈(코드모음)을 가져와 활용할 수 있으며 백엔드로서의 자바스크립트 언어에서 매우 중요한 함수중 하나이다.

*/
fs.readFile('./json-example-1.json', 'utf-8', (error, jsonfile) => {
/*
  ? fs. : 모듈이 지원하는 메서드 중 '파일을 읽는' 메서드인 readFile() 메서드이다.
*/
  if (error) { return error;}
  const jsonData = JSON.parse(jsonfile);
  // * 읽고 싶은 파일이 json 파일이기 때문에 자바스크립트 일반 객체로 보고자 JSON.parse() 메서드를 활용했다.
  console.log(jsonData); // * 일반적인 자바스크립트 객체방식으로 데이터를 조회할 수 있다
});

const example = {
  name:"피카츄",
  work:"programming" 
}
// * 간단한 객체 리터럴 작성 예제
/*
  ? 프론트엔드, 즉 사용자와의 상호작용으로 사용하는 경우 위와 같이 '직접작성(리터럴)' 하는 일은 거의 없고, input 데이터를 객체로 처리하는 방식을 사용한다. 
*/
const exampleJSON = JSON.stringify(example);
// * 위에 작성된 데이터를 JSON 표기법으로 변환하겠다는 목적으로 메서드 활용 JSON.stringify()
fs.writeFileSync('test.JSON', exampleJSON);
/* 

* 파일시스템이 지원하는 메서드 writeFileSync() 메서드를 통해 '동기적'으로 json 파일을 생성할 수 있다
? 이러한 작업은 node.js 혹은 백엔드에서만 가능한 작업이므로 프론트엔드에서는 작동하지 않는다.

*/

