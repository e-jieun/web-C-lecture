.root{
  width: 100vw;
  height: 200vh;
  display: flex;
  align-items: flex--end;
}
.container{
  width: inherit;
  height: inherit;
  display: flex;
  flex-direction: column;
}
p{
  color: rgb(48, 48, 48);
}

/* empty */
.container>div:nth-child(1){
  width: inherit;
  height: 10vh;
}
/* container->container */
.container>div:nth-child(2){
  width: inherit;
  height: 70vh;
  display: flex;
  /* Q1. 두 개의 컨테이너를 만들어 겹치는 방법으로 위의 두 플렉스된 header와 scroll을 main 부분과 합쳐서 레이아웃을 구성했습니다!
  혹시 이 방법 외에 한 컨테이너에 header, scroll, main 아이템을 모두 묶을 수 있는 방법이 있는지 궁금합니다! */

  /* check point */
  /* 
  
  훈련생께서 작업하신 '분리'하는 방식은 매우 적절한 판단입니다.
  현재는 다소 불편하다고 느껴지기 쉽지만, 나누어서 마크업을 했을때 장기적으로 '자바스크립트 제어' 측면에서 매우 유리하기 때문입니다.
  자바스크립트에서는 클래스처럼 사용할 것인지 아이디처럼 사용할 것인지와 같은 일련의 CSS 규칙을 따르는게 아닌 '만드는' 과정을 진행하기 때문입니다.

  그럼에도 컨테이너를 한데로 묶는 방법을 고안하는 것도  css활용측면에서 매우 훌륭한 응용이라 할 수 있겠습니다.

  강의에서 소개하지 않은 '배치 방식을 바꾸는 또다른' 속성이 필요한데,
  flex-wrap <-- 아이템들의 줄바꿈 여부 결정
  align-items:baseline; <- 나열된 요소들의 기준정렬방식
  flex-shrink / flex-grow : item 속성들의 사이즈 결정방식
  order : 아이템들의 배치방식

  이러한 것들입니다. 간단한 구조를 만들어 위에 나열한 다른 속성들을 가볍게 사용해보시기를 권합니다. 특히 order와 flex-wrap 값이 핵심이 될 것 같습니다.


  
  
  
  
  */



  position: absolute;
  top: 10vh;
  z-index: 1;
}
/* header */
.container>div:nth-child(2)>div:nth-child(1){
  width: 90%;
  height: 60%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background-color: var(--color-fff);
  border-radius: 0px 50px 50px 0px;
  /* https://developer.mozilla.org/ko/docs/Web/CSS/box-shadow */
  /* Q2. header의 그림자가 scroll 부분 위로 올라오지 않는 부분을 position: absolute;를 주고 z-index 값을 주면 모양이 틀어져 버려서 어떻게 해결하는 것이 좋을지 궁금합니다! */


  /* check point */

  /* 
  
  구조상으로 훈련생께서 작성하신 header 라는 컨테이너 묶음들과
  main 이라는 컨테이너 묶음은  형제관계로 완전히 개별적인 동등한 위치에 자리 잡혀 있습니다.
  강제로 끌어올리는 것이 있지만, 유지보수 측면에서 좋은 방식이 아니기때문에 마크업구조를 그림자를 사용할 요소의 아랫단계로 header부분을 조정한다면 간단히 해결가능합니다.
   

  
  
  
  */
  
  
  
  
  
  
  
  
  box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.2);

}
.container>div:nth-child(2)>div:nth-child(1)>ul{
  width: 70%;
  height: 10%;
  display: flex;
  justify-content: flex-end;
  column-gap: 2vw;
  list-style-type: none;
  color: var(--color-c4);
}
.container>div:nth-child(2)>div:nth-child(1)>ul li:nth-child(1){
  color: var(--color-bk);
  font-weight: 600;
}
/* header title con */
.container>div:nth-child(2)>div:nth-child(1)>div:nth-child(2){
  width: 70%;
  height: 10%;
  display: flex;
  align-items: flex-start;
}
.container>div:nth-child(2)>div:nth-child(1)>div:nth-child(2) p{
  font-size: large;
}
/* header title item */
.container>div:nth-child(2)>div:nth-child(1)>div:nth-child(3) {
  width: 70%;
  height: 40%;
  display: flex;
  align-items: flex-start;  
}
/* header title item p */
.container>div:nth-child(2)>div:nth-child(1)>div:nth-child(3) p{
  width: inherit;
}
/* green button con */
.container>div:nth-child(2)>div:nth-child(1)>div:nth-child(4){
  width: 25%;
  height: 15%;
  display: flex;
  justify-content: flex-end;
}
/* green button */
.container>div:nth-child(2)>div:nth-child(1)>div:nth-child(4) div{
  width: 30px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color:rgb(19, 156, 19);
  border-radius: 5px;
  color: var(--color-fff);
}
/* scroll */
.container>div:nth-child(2)>div:nth-child(2){
  width: 10%;
  height: inherit;
  display: flex;
  align-items: flex-end;
}
.container>div:nth-child(2)>div:nth-child(2)>div{
  width: 100%;
  height: 90%;
  background-color: var(--color-gray);
  border-radius: 80px 0px 0px 0px;
  display: flex;
  justify-content: center;
  align-items: center;
}
.container>div:nth-child(2)>div:nth-child(2)>div>div{
  width: 25%;
  height: 70%;
  background-color: var(--color-fff);
  border-radius: 100px;
  display: flex;
  justify-content: center;
}
.container>div:nth-child(2)>div:nth-child(2)>div>div>div{
  width: 90%;
  height: 10%;
  background-color: var(--color-c4);
  border-radius: 100px;
  position: relative;
  top: 1vw;
}
/* main */
.container>div:nth-child(3){
  width: inherit;
  height: 70vh;
  display: flex;
  align-items: flex-end;
  justify-content: flex-start;
  position: absolute;
  top: 10vh;
}
.container>div:nth-child(3)>div{
  width: 90vw;
  height: 35vh;
  background-color: gray;
  display: flex;
}
.container>div:nth-child(3)>div>div{
  display: flex;
  align-items: center;
  justify-content: space-evenly;
  position: relative;
  top: 3vh;
  overflow: hidden;
}
.container>div:nth-child(3)>div>div>div{
  width: 30%;
}