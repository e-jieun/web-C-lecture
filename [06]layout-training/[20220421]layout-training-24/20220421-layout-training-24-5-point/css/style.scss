*{margin: 0; padding: 0;}
#root{
	width: 100vw;
	height: 100vh;
	display: flex;

}
.space{
	width: 20vw;
	height: 100vh;
	// background-color:lightgray;
	// opacity: 0.1;
}
// 처음엔 container tag에 margin 값만 주었다가,
//임의의 세로선이 있으면 좋겠다 싶어서 20vw의 div을 하나 만들어서
// 글자를 정렬해보았다.

// check point 1

// 훌륭한 마크업 응용 판단입니다!
// 마크업은 어떤 규칙을 따르는 것으로 끝나는 것이 아니라, 필요하다면 내가 얼마든지 쥐락펴락 할 수 있는 '도구'가 되는 것이 이상향입니다.


.con{
	font-family: 'Kite One', sans-serif;
	font-size: 0.8rem;
	//정말 font-size가 '생각보다' 컸다.

	// Q1- font-size 설정시 rem을 쓸 때 가능한 자연수로 적는 게 좋은가요?
	// 그 이유는 무엇인가요? 값이 깔끔하게 떨어지는 것 보다, 어떻게 보이는지가
	// 중요한 것이 아닐까 하는 생각이 들었습니다.

/*

* rem을 굳이 쓰는 이유
* 개발자, 디자이너들은 항상 자주쓰는 무언가를 단순하게 만들려는 경향이 매우 뚜렷합니다.(추상화작업)

* 따라서 16이 1이 된다면 훨씬더 명확해지는 것이죠. 언제든지 1이라는 상징성을 활용할 수 있기 때문에
* 때에 따라서는 1.5 와 같은 실수를 사용할 때도 많습니다. 여기서 특이한점은 1.5 가 16의 1.5배인 24보다 직관적이라는 것입니다.
* 자바스크립트로 핸들링 할때도 이러한 추상화된 단위가 빛을 발휘합니다.
* 1은 true 로 판단하는 녀석이기 때문입니다.


? 아래의 고민들을 지속적으로 진행해볼것 -> 디자인 정체성 성립

*/




	color: gray;
	// margin-left: 20vw;
	position: relative;
	right: 0.1vw;
	margin-top: 30vh;
	// 무작정 just, align -center 주는 것 보다는
	//position 또는 margin 값을 조금씩 변화를 주면서
	// 좀 더 적합하다고 생각하는 값을 입력해서 위치를 조정해주기.

	&>p{
		margin-bottom: 1vh;
	}

	&>p:nth-child(3){
		position: relative;
		right: 0.1vw;
		// If와 And의 '수치상으로는' 위치의 값이 같음에도 불구하고, 위치가 맞지 않아 조정하였다.
	}

	&>p:nth-child(4){
		position: relative;
		right: 0.1vw;
		//위치 조정을 위한 position
	}

	&>p:nth-child(4)>span{
		color: black;
		// border-bottom: 0.1px solid black;
		// border-bottom도 주었지만 쓸 데 없이 눈에 띄어서 별로였다.

	}
}
