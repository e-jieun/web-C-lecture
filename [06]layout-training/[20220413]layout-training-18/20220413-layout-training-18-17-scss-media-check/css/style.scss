* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

#container {
  width: 100vw;
  height: 100vh;

  // background-color: #c4c4c4;
  // & div {
  //   // border:1px solid black;
  // }

  // menu
  &>div:nth-child(1) {
    width: 100%;
    height: 10%;
    display: flex;
    justify-content: center;
    align-items: center;

    &>div {
      width: 80px;
      height: 80px;
      text-align: center;
      line-height: 400%;
    }

    &>div:nth-child(2) {
      display: flex;
      justify-content: space-between;
      flex-direction: column;

      // menu color
      &>div:nth-child(1) {
        background-color: #7592A7;
        width: 100%;
        height: 85%;

      }

      &>div:nth-child(2) {
        background-color: #7592A7;
        width: 100%;
        height: 10%;
      }
    }
  }

  &>div:nth-child(2) {
    width: 100%;
    height: 90%;

    // 반응형 페이지를 만들기 위해 media query를 추가
    // 왜 안될까
    // 미디어 커리 할때 동일한 조건으로 모든 div의 위치 크기 조건을 다시 맞춰야한다
    // 뭔가 되게 바보짓한 느낌인데 더 나은 방법은 없나?

    @media (min-width:1000px) {
      display: flex;
      justify-content: center;
      align-items: center;
    }

    // display로 가로 정렬을 만들시 겹쳐지지 않기때문에 position으로 만들기로 함
    // 겹쳐지게 하기 위해서 크기도 다 절대값으로 줌
    &>div:nth-child(1) {
      width: 100px;
      height: 100%;
      position: relative;
      z-index: 3;
      line-height: 800px;
      font-size: 70px;
      text-align: end;
      color: #7592A7;
      font-weight: 20px;


      @media (min-width:1000px) {
        position: absolute;
        left: 0;
      }
    }


    &>div:nth-child(2) {
      width: 300px;
      height: 500px;
      position: relative;
      top: -600px;
      left: 50px;
      z-index: 2;
      background-color: #D5E0E8;

      @media (min-width:1000px) {
        position: relative;
        left: 0;
        top: 0;
        width: 30%;

      }


      display: flex;
      flex-direction: column;
      justify-content: space-around;
      align-items: center;

      // g부분
      &>div:nth-child(1) {
        font-size: 100px;
        font-weight: bold;
        text-align: center;

        &>div:nth-child(1) {
          position: relative;
          top: 140px;
          left: -5px;
          color: #7693A6;
          z-index: 1;
        }

        &>div:nth-child(2) {
          position: relative;
          z-index: 2;
          color: #ffffff;
        }


      }

      // 바 부분
      &>div:nth-child(2) {
        width: 150px;
        height: 5px;
        background-color: #7693A6;

      }

      &>div:nth-child(3) {
        text-align: center;
        color: #819BAF;
        margin: 10px;
      }


    }


    &>div:nth-child(3) {
      width: 200px;
      height: 500px;
      position: relative;
      top: -1150px;
      left: 200px;
      background-color: #7693A6;
      z-index: 1;


      @media (min-width:1000px) {
        position: relative;
        left: 0;
        top: 0;
        width: 20%;
        margin: 10px;

      }

    }



  }


}

@media (min-width:1000px) {

  .selector>div:nth-child(3) {}

}

/* 

* check point 1

? @media () {} 속성의 특성

* 선택자의 형태를 하고 있지만 사실 '함수'이기 때문에
* 다른 선택자의 '부품'으로 사용할 수는 없는 구조로 되어있다.

* 일반적인 CSS 선택자는 함수 안에 들어가는 '요소'이기 때문에
*함수 () { 요소} 의 구조를 가지고 있다.



*/