const arr = ["배열", "메서드는", "매우", "편리하다"];

for(let i = 0; i < arr.length; i++) {
  console.log(arr);
};
// ? 일반 제어문을 통한 loop 구현
/*

? 일반 loop 반복제어문 특징
* 프로그래밍 언어를 넘어선 매우 원론적인 방식이기 때문에 원리와 활용성이 매우 높다.
* 하지만 역으로 활용성이 높은 것 때문에 불편할때가 발생한다.
* 동작하고 싶은 것이 무엇이든지 원하는 횟수만큼 반복시킬 수 있다. = 장점
* 동작하고 싶은 것이 아무거나 다 반복시키기 때문에 예측하는데 피로도가 높다 = 단점

* 모두 명시하는 것이기 때문에 코드양이 많아질때는 해석하기에 상당히 피로하다.

*/
arr.forEach(function(value) {
  console.log(value);
})

// ? 자바스크립트에서 지원하는 배열 전용 반복메서드는 일반제어문과 같은 역할을 수행한다
/*

  ? 단어 자체가 가진 힘
  * 1. forEach()라는 단어만 보아도, 이것이 배열을 핸들링한다는 것을 단번에 알 수 있다. = 고수준의 추상화
  * 2. 일반적으로 특별한 경우가 아니라면 코드양이 매우 짧다.

  arr.forEach(value => console.log(value)); 
  * 윗줄의 코드가 18행의 코드를 극단적으로 줄인 사례이다. 
  * 실제로 개발자들은 위와같은 알고리즘(반복문)을 자주 사용하기 때문에 코드를 짧게 작성해도 쉽게 동작할 수 있도록 만들어 두었다.
*/

Array.prototype.customExample = function(callback) {
  for(let element of this) {
    callback(element);
  }
}
/* 
 ? 위 34행의 코드 ※ 실제로 이렇게 사용할일은 많지 않다.
 * 위 예제 코드는 forEach()가 배열(코어)객체에 어떻게 메서드로 작성되었는지 보여주는 예제이다.
 * 메서드 이름은 customExample() 로 작성되어 있지만, forEach()와 동일하게 사용된다.
 * for of()문, this 등등 여러가지 복잡한 로직들이 겹쳐 있기 때문에 이러한 원형을 만들필요는 없지만
 * forEach()가 왜 유용한지를 알아두는 것은 매우 좋은 훈련이된다.

*/