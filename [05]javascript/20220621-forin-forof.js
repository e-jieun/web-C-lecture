const objData = {
  "피카츄": null,
  "라이츄": null,
  "파이리": null,
  "꼬부기": null,
  "버터풀": null,
  "야도란": null,
  "피존투": null,
  "또가스": null,
};

for (let keys of Object.keys(objData)) {
  console.log("for of :" + keys);
}
/*
  ? for of 문
  ? ~중에 라는 뜻으로 for, for in, for of, forEach 등 반복문계열 중에 가장 헷갈리는 구문중 하나이다.
  ? for of 는 정확히 '배열'에서만 동작하는 반복문이고,
  ? 위의 예제는 Object.keys(객체)를 통해 객체안의 키이름들을 배열로 수집한 방식이다.
  ? 따라서 for in문을 사용한 것과 동일한 결과를 낸다.
  * 배열로 처리하는 프론트엔드 특성상 위와같은 패턴 + push를 통해 특정 데이터를 가공할때 자주 사용한다.
*/
console.log('-----------------------------------');
for (let keys in objData) {
  console.log("for in :" + keys);
}
/*
  ? for in 문은 위의 for of보다 직접적으로 '객체 안에 있는 키'를 조회하기 때문에 쓰임이 많아보이지만,
  ? 순서가 중요한 작업에서의 반복문으로서는 권장되지 않는 방법이다.
  ? 단순 나열 용도로는 사용하기에는 문제가 되지 않아 보통 디버깅할 때만 사용한다.
  * 간단한 조회 용으로는 사용하기 괜찮으나, 제어용도로는 부적합하다.
  * 반복해서 제어하는 것에는 보다 직접적인 '배열'로 가공하는 것을 권장하는 추세이다.
  * 
  * 
  * 객체를 -> 배열로 , 배열을 -> 객체로 데이터를 가공하는 일이 매우 많아지는데
  * 제어를 하고자 한다면 일반적으로 배열로 가공하는 경우가 많고
  * 저장이나 관리를 하고자 한다면 배열을 객체로 가공하는 경우가 많다.
  * 
  * 데이터 통신으로 외부 데이터 API를 처리하는 일에서는 객체를 -> 배열로 가공하여 작업하는일이 다반사이다.
  *
  * 일련의 데이터를 가공한 뒤 필요한 만큼 저장하고자 하는(백엔드관련) 일이 발생할 경우 -> 객체(JSON)로 가공하여 저장한다.
  


*/